# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.hamcrest.assert-that
+alias org.eolang.math.e
+alias org.eolang.math.nan
+alias org.eolang.math.number
+alias org.eolang.math.positive-infinity
+alias org.eolang.math.negative-infinity
+home https://github.com/objectionary/eo-math
+junit
+package org.eolang.math
+version 0.0.0

[] > log-of-num-on-base-of-nan-is-nan
  assert-that > @
    as-bytes.
      log.
        number 42
        nan
    $.equal-to (nan.as-bytes)

[] > log-of-nan-on-base-of-num-is-nan
  assert-that > @
    as-bytes.
      log.
        number nan
        42
    $.equal-to (nan.as-bytes)

[] > log-of-nan-on-base-of-nan-is-nan
  assert-that > @
    as-bytes.
      log.
        number nan
        nan
    $.equal-to (nan.as-bytes)

[] > log-of-negative-int-on-base-of-not-nan-is-nan
  assert-that > @
    as-bytes.
      log.
        number -1
        2
    $.equal-to (nan.as-bytes)

[] > log-of-negative-float-on-base-of-not-nan-is-nan
  assert-that > @
    as-bytes.
      log.
        number -2.2
        2
    $.equal-to (nan.as-bytes)

[] > log-of-not-nan-on-base-of-negative-int-is-nan
  assert-that > @
    as-bytes.
      log.
        number 42
        -2
    $.equal-to (nan.as-bytes)

[] > log-of-not-nan-on-base-of-negative-float-is-nan
  assert-that > @
    as-bytes.
      log.
        number 42
        -4.2
    $.equal-to (nan.as-bytes)

[] > log-of-int-one-on-base-of-int-one-is-nan
  assert-that > @
    as-bytes.
      log.
        number 1
        1
    $.equal-to (nan.as-bytes)

[] > log-of-float-one-on-base-of-int-one-is-nan
  assert-that > @
    as-bytes.
      log.
        number 1.0
        1
    $.equal-to (nan.as-bytes)

[] > log-of-int-one-on-base-of-float-one-is-nan
  assert-that > @
    as-bytes.
      log.
        number 1
        1.0
    $.equal-to (nan.as-bytes)

[] > log-of-float-one-on-base-of-float-one-is-nan
  assert-that > @
    as-bytes.
      log.
        number 1.0
        1.0
    $.equal-to (nan.as-bytes)

[] > log-of-positive-infinity-on-base-of-int-zero-is-nan
  assert-that > @
    as-bytes.
      log.
        number positive-infinity
        0
    $.equal-to (nan.as-bytes)

[] > log-of-positive-infinity-on-base-of-float-zero-is-nan
  assert-that > @
    as-bytes.
      log.
        number positive-infinity
        0.0
    $.equal-to (nan.as-bytes)

[] > log-of-positive-infinity-on-base-of-positive-infinity-is-nan
  assert-that > @
    as-bytes.
      log.
        number positive-infinity
        positive-infinity
    $.equal-to (nan.as-bytes)

[] > log-of-int-zero-on-base-of-int-zero-is-nan
  assert-that > @
    as-bytes.
      log.
        number 0
        0
    $.equal-to (nan.as-bytes)

[] > log-of-float-zero-on-base-of-int-zero-is-nan
  assert-that > @
    as-bytes.
      log.
        number 0.0
        0
    $.equal-to (nan.as-bytes)

[] > log-of-int-zero-on-base-of-float-zero-is-nan
  assert-that > @
    as-bytes.
      log.
        number 0
        0.0
    $.equal-to (nan.as-bytes)

[] > log-of-float-zero-on-base-of-float-zero-is-nan
  assert-that > @
    as-bytes.
      log.
        number 0.0
        0.0
    $.equal-to (nan.as-bytes)

[] > log-of-int-zero-on-base-of-positive-infinity-is-nan
  assert-that > @
    as-bytes.
      log.
        number 0
        positive-infinity
    $.equal-to (nan.as-bytes)

[] > log-of-float-zero-on-base-of-positive-infinity-is-nan
  assert-that > @
    as-bytes.
      log.
        number 0.0
        positive-infinity
    $.equal-to (nan.as-bytes)

[] > log-of-negative-infinity-on-base-of-int-one-is-nan
  assert-that > @
    as-bytes.
      log.
        number negative-infinity
        1
    $.equal-to (nan.as-bytes)

[] > log-of-negative-infinity-on-base-of-float-one-is-negative-infinity
  assert-that > @
    as-bytes.
      log.
        number negative-infinity
        1.0
    $.equal-to (nan.as-bytes)

[] > log-of-positive-infinity-on-base-of-int-one-is-positive-infinity
  assert-that > @
    log.
      number positive-infinity
      1
    $.equal-to positive-infinity

[] > log-of-positive-infinity-on-base-of-float-one-is-positive-infinity
  assert-that > @
    log.
      number positive-infinity
      1.0
    $.equal-to positive-infinity

[] > log-of-int-zero-on-base-of-int-one-is-negative-infinity
  assert-that > @
    log.
      number 0
      1
    $.equal-to negative-infinity

[] > log-of-float-zero-on-base-of-int-one-is-negative-infinity
  assert-that > @
    log.
      number 0.0
      1
    $.equal-to negative-infinity

[] > log-of-int-zero-on-base-of-float-one-is-negative-infinity
  assert-that > @
    log.
      number 0
      1.0
    $.equal-to negative-infinity

[] > log-of-float-zero-on-base-of-float-one-is-negative-infinity
  assert-that > @
    log.
      number 0.0
      1.0
    $.equal-to negative-infinity

[] > log-of-int-one-on-base-of-positive-infinity-is-zero
  assert-that > @
    log.
      number 1
      positive-infinity
    $.equal-to 0.0

[] > log-of-float-one-on-base-of-positive-infinity-is-zero
  assert-that > @
    log.
      number 1.0
      positive-infinity
    $.equal-to 0.0

[] > log-of-int-one-on-base-of-int-zero-is-zero
  assert-that > @
    log.
      number 1
      0
    $.equal-to 0.0

[] > log-of-float-one-on-base-of-float-zero-is-zero
  assert-that > @
    log.
      number 1.0
      0.0
    $.equal-to 0.0

[] > log-of-two-on-base-of-two-is-one
  assert-that > @
    log.
      number 2
      2.0
    $.equal-to 1.0

[] > log-of-e-on-base-of-e-is-one
  assert-that > @
    log.
      number e
      e
    $.equal-to 1.0

[] > log-of-two-five-six-on-base-of-two-is-eight
  assert-that > @
    log.
      number 256
      2
    $.equal-to 8.0

[] > ln-of-negative-float-is-nan
  assert-that > @
    as-bytes.
      ln.
        number -2.2
    $.equal-to (nan.as-bytes)

[] > ln-of-float-zero-is-negative-infinity
  assert-that > @
    ln.
      number 0.0
    $.equal-to negative-infinity

[] > ln-of-float-one-is-float-zero
  assert-that > @
    ln.
      number 1.0
    $.equal-to 0.0

[] > ln-of-e-one-is-float-one
  assert-that > @
    ln.
      number e
    $.equal-to 1.0

[] > ln-of-float-ten
  assert-that > @
    ln.
      number 10.0
    $.equal-to 2.302585092994046

[] > ln-of-negative-int-is-nan
  assert-that > @
    as-bytes.
      ln.
        number -42
    $.equal-to (nan.as-bytes)

[] > ln-of-int-zero-is-negative-infinity
  assert-that > @
    ln.
      number 0
    $.equal-to negative-infinity

[] > ln-of-int-one-is-int-zero
  assert-that > @
    ln.
      number 1
    $.equal-to 0

[] > ln-of-int-twenty
  assert-that > @
    ln.
      number 20
    $.equal-to 2.995732273553991
